#!/usr/bin/perl -w

# this script shows two current flaws with the trigger system:
# 	1) scripts need a way to store some global data
# 	2) scripts need a way to store subroutines

use vars qw($START_TIME); # this is dangerous
$START_TIME = time;

'!(?i:uptime)' => sub {
	my $contim = sub {
		my $sec = shift;
		$sec = int($sec + 0.5); # round second
		my $days = int($sec / 86400); $sec %= 86400;
		my $hours = int($sec / 3600); $sec %= 3600;
		my $minutes = int($sec / 60); $sec %= 60;

		my $base = sprintf("%d:%02d:%02d", $hours, $minutes, $sec);

		$days <= 0 and
			return $base;

		if ($days != 1) {
			return sprintf("%d days ", $days) . $base;
		} else {
			return ("1 day " . $base);
		}
	};

	my ($trigger, $message, $nick, $address, $target, $server) = @_;

	defined($target) or
		$target = $nick;

	open(SUT, '</proc/uptime') or do {
		$server->command("msg $target Error: Unable to fetch system uptime.");
		return (0, $trigger, $message, undef, $nick, $address, $target, $server);
	};

	my $rsut = <SUT>;

	close(SUT) or
		warn; # this should be changed to something more useful

	my ($sut) = split(/(?:\b|\s)+/, $rsut, 2);

	my $irssi = $contim->(time() - $START_TIME);
	my $system = $contim->($sut);

	$server->command("msg $target Bot Uptime [ $irssi ]  System Uptime [ $system ]");

	return (1, $trigger, $system, $irssi, $nick, $address, $target, $server);
}
